NOTE: I'm archiving the 4hr exercise to the branch 'exercise4hr' and moving/merging geographies to the master.

BIG OVERVIEW: My general goal was to allow, on a full-sized screen, for comparison between regions and give users the ability to scroll between different dates. I went with a ‘card’ or ‘panel’ based layout to also enable mobile reading of a single region at a time.  

GENERAL TOOLS/STRUCTURE: My impulse, with repeated components, is to ‘react-ify’ the structure into JSX, but given the basic ‘read-only’ relationship with the UN data and absence of more complex store needs. . . I opted for basic HTML/CSS with bootstrap, jQuery and d3.js. The later two provide enough selection options to iterative over the ‘cards,’ filling them with basic html and svg visualization elements. (Second, if I’m being honest, not using react means I don’t have to re-engineering the management of transitions via ‘react-transition-group’. It seems excessive at this scale, but would make sense if this were a much larger single-page app.)

AVENUES FOR ITERATION & IMPROVEMENT: In terms of the quick result, the responsive options are fine. The general layout is clear. Most of the color choices and overlay transparencies match the original sample. In term of ease of expansion, the component structure of the cards would make producing one graphic per continent or country pretty easy; it’s DRY and re-usable in that sense. That said, it’s a pain to skim quoted html in js… so that’s not best practice. It could be re-factored even further for smaller, functional elements.

There are a few obvious issues with legibility: I’m not exactly pleased with the way the text sits over the largest donut charts, so I’d likely rework the palette and max-donut radius for clarity in another draft. I’m concerned about the accessibility of the <small> text for general readership, even though massive jumps in text hierarchy reinforce message importance. And I’m really ambivalent about is whether to engage readers with the mouseOver reveal of urban growth percentages (happens now, mostly to have a 3rd level of interaction) or to simply have that text consistently displayed/transitioned like all the other labels.  In a second round, I’d go with the fixed label . . . because the big ‘thesis’ is the massive increase in urban populations (hence the need to plan for it!).

ORDER OF OPERATIONS:  (Warning, long, linear description) In terms of process, I began with the pdf, just to get a sense of whether something with more or less data could be built. That inspired the idea of having another layer of geographic/country-by-country display on a modal. . . which did not fit into four hours. Next were wireframes, to choose between single graphic vs. the card layout; there’s not quite enough information density in these summaries to go with a full page per region - even with 2 donuts – plus my preference from print is to allow comparisons across datasets. With those sketches in mind, I set up my folder structure, copied my needed libraries/css, and set-up placeholder files.

In coding, I started with the data: By choosing the cards, I knew I would need to segment the information one sees by year; plus, an excuse to play with transitions (a tad abused in this code). So I pasted the needed UN data into an object, with major divisions keyed by continent and sub-categories holding internal arrays, indexed by year.  Next was the basic index.html, the card.js, and started the style.css. None of those are fancy or exciting, but they set the graphic tone for the visualizations and establish which ids, classes, and inputs are used for the d3 visualization. The background continents were copied from the pdf via illustrator and exported with a consistent art-board. The one thing I re-factored in the basic html structure was adding alternate inputs for mobile viewers. Despite what ‘caniuse’ says, the slider was acting weird in smaller screens, so I opted back to buttons. On a second round of responsive revisions, I’d probably update the d3 mouseOver/mouseOut triggers to better work with touch events also.

For the d3 work, I started by building out the visualization using ‘Asia’, since it would have the max values.  The donut/arc structure is pretty basic and Mike Bostock has a decent transition sample to build out from. Once I was happy enough with a few adjustments for radial/ text transitions and event triggers, I simply nested the whole thing into a loop to repeat the visualization for the other regions. The internal structure didn’t change that much in that re-factoring; generally, working with transitions in d3 forces a certain amount of rigor in creating and maintaining index locations for old vs. new data. Likewise, the idea that you’re mapping parallel data-sets through the same core code forces explicit/consistent use of ids/references. There’s a smattering of es5 and es6… so I could clean it out for more consistent syntax and scoping, but that’s cosmetic at this point.

I think I probably ran long by 30-40 minutes and these notes have added an hour to the exercise… but that’s a pretty decent half-day build (with need for some more design iteration to resolve layout issues).
